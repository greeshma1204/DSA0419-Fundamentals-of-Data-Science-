import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler

# Load the dataset (replace 'patient_data.csv' with your actual dataset file)
data = pd.read_csv('patient_data.csv')

# Assume the dataset has columns 'symptom1', 'symptom2', ..., 'symptomN', 'condition'
X = data.drop('condition', axis=1)  # Features (symptoms)
y = data['condition']  # Target variable (0 or 1)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the KNN classifier
k = int(input("Enter the number of neighbors (k): "))
knn = KNeighborsClassifier(n_neighbors=k)
knn.fit(X_train, y_train)

# Input new patient features
new_patient = []
num_features = X.shape[1]
for i in range(num_features):
    feature_value = float(input(f"Enter value for symptom {i + 1}: "))
    new_patient.append(feature_value)

# Standardize the new patient's features
new_patient_scaled = scaler.transform([new_patient])

# Predict the condition for the new patient
prediction = knn.predict(new_patient_scaled)

# Output the prediction
if prediction[0] == 1:
    print("The patient is predicted to have the medical condition.")
else:
    print("The patient is predicted not to have the medical condition.")


